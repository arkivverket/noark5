#!/usr/bin/python3

__license__ = 'GNU General Public License v2 or later at users choice'
__author__ = 'Petter Reinholdtsen'

import glob
import json
import csv

import docutils.nodes
import docutils.parsers.rst
import docutils.utils
import docutils.frontend

class RstVisitor(docutils.nodes.NodeVisitor):
    req = []

    def visit_table(self, node: docutils.nodes.reference) -> None:
        """Called for "table" nodes."""
        self.entry = {}
        self.header = {}

    def visit_row(self, node: docutils.nodes.reference) -> None:
        """Called for "table row" nodes."""
        #print(node)
        if not self.header:
            col = 0
            while node.children:
                field = node.children.pop(0).astext()
                self.header[col] = field
                col += 1
            return

        if not 'Krav nr.' == self.header[0]:
            return
        col = 0
        while node.children:
            #print("C:", node.children)
            value = node.children.pop(0).astext()
            #print("Value:", value)
            value = str(value) \
                .replace('\n', 'xxx') \
                .replace('<bullet_list bullet="-">', '\n') \
                .replace('</bullet_list>', '\n') \
                .replace('<list_item><paragraph>', '- ') \
                .replace('</paragraph></list_item>', '\n') \
                .replace('<entry>', '') \
                .replace('</entry>', '') \
                .replace('</paragraph><paragraph>', '\n\n') \
                .replace('<paragraph>', '') \
                .replace('</paragraph>', '\n') \
                .replace('xxx', ' ')
            value = value \
                .replace('<strong>', '**') \
                .replace('</strong>', '**') \
                .replace('<emphasis>', '*') \
                .replace('</emphasis>', '*')
            value = value.strip()
            self.entry[self.header[col]] = value
            col += 1
        self.req.append(self.entry)
        #print("append", self.entry)
        self.entry = {}

    def depart_table(self, node: docutils.nodes.Node) -> None:
        """Called when leaving a table."""
        pass

    def unknown_visit(self, node: docutils.nodes.Node) -> None:
        """Called for all other node types."""
        pass

    def unknown_departure(self, node: docutils.nodes.Node) -> None:
        """Called for all other node types."""
        pass

def parse_rst(text: str) -> docutils.nodes.document:
    parser = docutils.parsers.rst.Parser()
    components = (docutils.parsers.rst.Parser,)
    settings = docutils.frontend.OptionParser(components=components).get_default_values()
    document = docutils.utils.new_document('<rst-doc>', settings=settings)
    parser.parse(text, document)
    return document

def main():
    fmt = "tsv"
    requirements = []
    for filepath in sorted(glob.glob('kapitler/0*.rst')):
        #print("Processing %s" % filepath)
        with open(filepath, 'r', encoding='utf-8') as fh:
            content = fh.read()
            doc = parse_rst(content, parser, settings)
            visitor = RstVisitor(doc)
            visitor.req = requirements
            doc.walkabout(visitor)
            requirements = visitor.req
    # numeric version sort (1.2.3 < 1.19.2)
    def nrsort(s):
        return list(map(int, s['Krav nr.'].split('.')))
    # JSON output
    if "json" == fmt:
        with open('krav.json', 'w', encoding='utf-8') as f:
            json.dump(sorted(requirements, key=nrsort), f,
                      ensure_ascii=False, indent=4)
    # Tab separate file output
    elif "tsv" == fmt:
        reqlist = [('Krav nr.', 'Kravgruppe', 'Beskrivelse', 'Type', 'Merknad')]
        for r in sorted(requirements, key=nrsort):
            row = []
            for f, v in r.items():
                if f in reqlist[0]:
                    row.append(v)
                else:
                    row.append(f.replace("\n", " "))
                    row.append(v)
            reqlist.append(row)

        with open('avledet/krav.tsv', 'w', encoding='utf-8') as f:
            writer = csv.writer(f, delimiter='\t')
            writer.writerows(reqlist)
    elif "rst" == fmt:
        with open('avledet/krav.rst', 'w', encoding='utf-8') as f:
            f.write("""
.. list-table:: **Kravliste for Noark 5**
   :header-rows: 1
""")
            first = "*"
            for key in requirements[0].keys():
                f.write(" " + first + " - " + key + "\n")
                first = " "
            for r in sorted(requirements, key=nrsort):
                first = "*"
                for key in r.keys():
                    f.write(" " + first + " - " + r[key] + "\n")
                    first = " "
    return 0

if __name__ == '__main__':
    exit(main())
