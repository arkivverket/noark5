#!/usr/bin/python3

import argparse
from datetime import date
import re
import sys
import yaml


def main():
    retval = 0
    required = ('Nr', 'Navn', 'Datatype',
                'Definisjon', 'Arkivenhet', 'Kilde')
    optional = ('Noark 4', 'Arv', 'Betingelser', 'Kommentarer',)
    parser = argparse.ArgumentParser()
    parser.add_argument("yamlfile", nargs='+',
                        help="the metadata YAML file(s) to summarize")
    parser.add_argument("--verbose", action="store_true",
                        help="enable debug output")
    parser.add_argument("--sortonobject", action="store_true",
                        help="alternative output format, sorted on objects")
    args = parser.parse_args()
    metadata = {}
    puids = {}
    for filename in args.yamlfile:
        with open(filename, 'r') as f:
            info = yaml.load(f, Loader=yaml.FullLoader)
            if 'Utdatert' in info and 'nei' != info['Utdatert'] \
               and info['Utdatert'] <= date.today():
                continue
            for field in required:
                if not field in info:
                    print("error: Missing field %s in %s" % (field, filename),
                          file=sys.stderr)
                    retval = 1
            for field in optional:
                if field not in info:
                    info[field] = ""
            info['filename'] = filename
            if info['Nr'] in metadata:
                print("error: duplicate number %s (%s and %s)" % (
                    info['Nr'], filename, metadata[info['Nr']]['filename']
                ),
                      file=sys.stderr)
            else:
                number = info['Nr']
                metadata[number] = info
    if args.sortonobject:
        byunit = {}
        for number in sorted(metadata.keys()):
            if 'Arkivenhet' in metadata[number] \
               and '.xml' not in metadata[number]['Arkivenhet'] \
               and 'Filen' not in metadata[number]['Arkivenhet'] \
               and 'inngår ikke' not in metadata[number]['Arkivenhet']:
                units = re.split(r'(, *| og )', metadata[number]['Arkivenhet'])
                for unit in units:
                    if not unit in byunit:
                        byunit[unit] = {}
                    byunit[unit][number] =metadata[number]

        for unit in byunit:
            print("By %s" % unit)
            for number in byunit[unit]:
                line = []
                for f in ('Nr', 'Navn', 'Datatype'):
                    line.append(byunit[unit][number][f])
                print(line)
            print()
    else:
        fields = ('Nr',
                  'Navn',
                  'Datatype',
                  'Definisjon',
                  'Arkivenhet',
                  'Kilde',
                  'Arv',
                  'Betingelser',
                  'Kommentarer')
        boldvalue = ('Nr', 'Navn')
        print("""
Katalogoppføringer
------------------

""")
        def mapvalue(field, value):
            if field in boldvalue:
                value = '**%s**' % value
            return value

        lastgroup = None
        for number in sorted(metadata.keys()):
            name = metadata[number]['Navn']
            table = []
            for f in fields:
                if tuple == type(f):
                    line = []
                    for field in f:
                        value = mapvalue(field, metadata[number][field])
                        line.extend(('**%s**' % field, value))
                    table.extend([line])
                else:
                    value = mapvalue(f, metadata[number][f])
                    table.extend((('**%s**' % f, value),))
            if lastgroup != metadata[number]['Gruppe']:
                g = metadata[number]['Gruppe']
                print("")
                print(g)
                print("~" * len(g))
                print("")
                lastgroup = g
            print(".. list-table::")
            print("   :widths: 2 6")
            print("   :header-rows: 0")
            print()
            for f, v in table:
                print("   * - %s" % f)
                if v:
                    v = v.replace("\n", "\n       ")
                else:
                    v = ""
                print("     - %s" % v)
            print()
    return retval

if '__main__'== __name__:
    exit(main())
